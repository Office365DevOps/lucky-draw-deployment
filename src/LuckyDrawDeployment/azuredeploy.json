{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "microsoftAppId": {
      "type": "string"
    },
    "microsoftAppSecret": {
      "type": "securestring"
    },
    "productShortName": {
      "type": "string",
      "defaultValue": "yourProductName"
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "dev"
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "Describes plan's pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "appServicePlanInstanceCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Describes plan's instance count"
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "australiaeast",
        "australiasoutheast",
        "brazilsouth",
        "centralus",
        "eastasia",
        "eastus",
        "eastus2",
        "japaneast",
        "japanwest",
        "northcentralus",
        "northeurope",
        "southcentralus",
        "southeastasia",
        "westeurope",
        "westus"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    }
  },
  "variables": {
    "resourceNamePrefix": "[concat(toLower(parameters('productShortName')), '-')]",
    "resourceNamePostfix": "[concat('-', toLower(parameters('environmentName')))]",
    "appServicePlanName": "[concat(variables('resourceNamePrefix'), 'appplan', variables('resourceNamePostfix'))]",
    "keyVaultName": "[concat(variables('resourceNamePrefix'), 'keyvault', variables('resourceNamePostfix'))]",
    "timerLogicAppName": "[concat(variables('resourceNamePrefix'), 'timer', variables('resourceNamePostfix'))]",
    "botApiName": "[concat(variables('resourceNamePrefix'), 'botapi', variables('resourceNamePostfix'))]",
    "appInsightsName": "[concat(variables('resourceNamePrefix'), 'appinsights', variables('resourceNamePostfix'))]",
    "botServiceName": "[concat(variables('resourceNamePrefix'), 'bot', variables('resourceNamePostfix'))]",
    "storageName": "[concat(toLower(parameters('productShortName')), '4', toLower(parameters('environmentName')))]"
  },
  "functions": [
    {
      "namespace": "luckydraw",
      "members": {
        "logicAppTriggerUrl": {
          "parameters": [
            {
              "name": "url",
              "type": "string"
            }
          ],
          "output": {
            "type": "string",
            "value": "[concat(substring(parameters('url'), 0, indexOf(parameters('url'), '?')), '/triggers/manual/paths/invoke', substring(parameters('url'), indexOf(parameters('url'), '?')))]"
          }
        }
      }
    }
  ],
  "resources": [
    {
      "name": "[variables('timerLogicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "displayName": "Timer LogicApp"
      },
      "apiVersion": "2016-06-01",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "callbackMethod": {
                      "type": "string"
                    },
                    "callbackTime": {
                      "type": "string"
                    },
                    "callbackUrl": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Delay_until": {
              "runAfter": {},
              "type": "Wait",
              "inputs": {
                "until": {
                  "timestamp": "@triggerBody()?['CallbackTime']"
                }
              }
            },
            "HTTP": {
              "runAfter": {
                "Delay_until": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "method": "@triggerBody()?['CallbackMethod']",
                "uri": "@triggerBody()?['CallbackUrl']"
              }
            }
          },
          "outputs": {}
        },
        "parameters": {}
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('appServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "App Service Plan"
      },
      "sku": {
        "name": "[parameters('appServicePlanSku')]",
        "capacity": "[parameters('appServicePlanInstanceCount')]"
      },
      "properties": {
        "name": "[variables('appServicePlanName')]"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "name": "[variables('botApiName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource",
        "displayName": "BotApi AppService"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components/', variables('appInsightsName'))]"
      ],
      "properties": {
        "name": "[variables('botApiName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "phpVersion": "Off",
          "appSettings": [
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "[parameters('environmentName')]"
            },
            {
              "name": "KeyVaultName",
              "value": "[variables('keyVaultName')]"
            },
            {
              "name": "ServicePublicBaseUrl",
              "value": "[concat('https://', variables('botApiName'), '.azurewebsites.net/')]"
            },
            {
              "name": "Bot:Id",
              "value": "[parameters('microsoftAppId')]"
            },
            {
              "name": "ApplicationInsights:InstrumentationKey",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "Microsoft.Insights/webtests",
          "name": "[concat(variables('botApiName'), '-webtest')]",
          "apiVersion": "2015-05-01",
          "location": "East US",
          "tags": {
            "[concat('hidden-link:', resourceId('Microsoft.Insights/components', variables('appInsightsName')))]": "Resource",
            "displayName": "WebTest"
          },
          "properties": {
            "Name": "[concat(variables('botApiName'), ' Availability')]",
            "Description": "",
            "Enabled": true,
            "Frequency": 900,
            "Timeout": 120,
            "Kind": "ping",
            "RetryEnabled": true,
            "Locations": [
              {
                "Id": "us-tx-sn1-azr"
              },
              {
                "Id": "us-il-ch1-azr"
              },
              {
                "Id": "us-ca-sjc-azr"
              },
              {
                "Id": "us-va-ash-azr"
              },
              {
                "Id": "emea-au-syd-edge"
              }
            ],
            "Configuration": {
              "WebTest": "[concat('<WebTest Name=\"BotApi Availability\" Id=\"e6d712d8-914a-484c-acb6-2015e2fea4fe\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\"><Items><Request Method=\"GET\" Guid=\"59c8203a-0933-460f-8bcf-093065af7b46\" Version=\"1.1\" Url=\"https://', variables('botApiName'), '.azurewebsites.net/healthcheck\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>')]"
            },
            "SyntheticMonitorId": "[variables('botApiName')]"
          },
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', variables('botApiName'))]",
            "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
          ]
        }
      ]
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat(variables('appServicePlanName'), '-', resourceGroup().name)]",
      "type": "Microsoft.Insights/autoscalesettings",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource",
        "displayName": "AutoScaleSettings"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": 1,
              "maximum": 2,
              "default": 1
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80.0
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT1H",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 60.0
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT1H"
                }
              }
            ]
          }
        ],
        "enabled": false,
        "name": "[concat(variables('appServicePlanName'), '-', resourceGroup().name)]",
        "targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "East US",
      "tags": {
        "displayName": "AppInsights"
      },
      "properties": {
        "Application_Type": "other"
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ServerErrors ', variables('botApiName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('botApiName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botApiName'))]": "Resource",
        "displayName": "ServerErrorsAlertRule"
      },
      "properties": {
        "name": "[concat('ServerErrors ', variables('botApiName'))]",
        "description": "[concat(variables('botApiName'), ' has some server errors, status code 5xx.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botApiName'))]",
            "metricName": "Http5xx"
          },
          "operator": "GreaterThan",
          "threshold": 0.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ForbiddenRequests ', variables('botApiName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('botApiName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botApiName'))]": "Resource",
        "displayName": "ForbiddenRequestsAlertRule"
      },
      "properties": {
        "name": "[concat('ForbiddenRequests ', variables('botApiName'))]",
        "description": "[concat(variables('botApiName'), ' has some requests that are forbidden, status code 403.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botApiName'))]",
            "metricName": "Http403"
          },
          "operator": "GreaterThan",
          "threshold": 0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageName')]",
      "apiVersion": "2018-07-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Storage"
      },
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "name": "[variables('botServiceName')]",
      "type": "Microsoft.BotService/botServices",
      "apiVersion": "2018-07-12",
      "location": "global",
      "tags": {
        "displayName": "Bot Service"
      },
      "sku": {
        "name": "F0"
      },
      "kind": "bot",
      "properties": {
        "displayName": "LuckyDraw Bot",
        "endpoint": "https://www.microsoft.com",
        "msaAppId": "[parameters('microsoftAppId')]"
      }
    },
    {
      "name": "[variables('keyVaultName')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "KeyVault"
      },
      "properties": {
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enabledForVolumeEncryption": false,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
        ],
        "sku": {
          "name": "standard",
          "family": "A"
        }
      },
      "resources": [
        {
          "name": "[concat(variables('keyVaultName'), '/add')]",
          "type": "Microsoft.KeyVault/vaults/accessPolicies",
          "apiVersion": "2016-10-01",
          "tags": {
            "displayName": "Access Policies"
          },
          "properties": {
            "accessPolicies": [
              {
                "tenantId": "[subscription().tenantId]",
                "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('botApiName')), '2018-02-01', 'Full').identity.principalId]",
                "permissions": {
                  "keys": [
                    "get",
                    "list",
                    "decrypt",
                    "encrypt",
                    "unwrapKey",
                    "wrapKey",
                    "verify",
                    "sign"
                  ],
                  "secrets": [
                    "get",
                    "list"
                  ]
                }
              }
            ]
          },
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
          ]
        },
        {
          "type": "Microsoft.KeyVault/vaults/secrets",
          "name": "[concat(variables('keyVaultName'), '/LuckyDrawBot--1--Bot--Password')]",
          "apiVersion": "2016-10-01",
          "tags": {
            "displayName": "Secret: LuckyDrawBot--1--Bot--Password"
          },
          "properties": {
            "value": "[parameters('microsoftAppSecret')]",
            "contentType": "string",
            "attributes": {
              "enabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
          ]
        },
        {
          "type": "Microsoft.KeyVault/vaults/secrets",
          "name": "[concat(variables('keyVaultName'), '/LuckyDrawCommon--DataTable--ConnectionString')]",
          "apiVersion": "2016-10-01",
          "tags": {
            "displayName": "Secret: LuckyDrawCommon--DataTable--ConnectionString"
          },
          "properties": {
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2018-07-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
            "contentType": "string",
            "attributes": {
              "enabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]"
          ]
        },
        {
          "type": "Microsoft.KeyVault/vaults/secrets",
          "name": "[concat(variables('keyVaultName'), '/LuckyDrawCommon--HttpClientFactory--Timer--BaseAddress')]",
          "apiVersion": "2016-10-01",
          "tags": {
            "displayName": "Secret: LuckyDrawCommon--HttpClientFactory--Timer--BaseAddress"
          },
          "properties": {
            "value": "[luckydraw.logicAppTriggerUrl(listCallbackUrl(resourceId('Microsoft.Logic/workflows', variables('timerLogicAppName')), '2016-06-01').value)]",
            "contentType": "string",
            "attributes": {
              "enabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[concat('Microsoft.Logic/workflows/', variables('timerLogicAppName'))]"
          ]
        }
      ]
    }
  ]
}